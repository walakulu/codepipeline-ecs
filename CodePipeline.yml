AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the CodePipeline.

Parameters:
  Stage:
    Type: String
    Default: dev
  GithubUserName:
    Type: String
    Default: <GithubUser>
  MS1GithubRepo:
    Type: String
    Default: spring-codepipeline
    Description: Github Repo name for microservice 1
#  MS2GithubRepo:
#    Type: String
#    Description: Github Repo name for microservice 2
#  MS3GithubRepo:
#    Type: String
#    Description: Github Repo name for microservice 3
#  MS4GithubRepo:
#    Type: String
#    Description: Github Repo name for microservice 4
#  MS5GithubRepo:
#    Type: String
#    Description: Github Repo name for microservice 5
#  MS6GithubRepo:
#    Type: String
#    Description: Github Repo name for microservice 6
  GithubOpsRepo:
    Type: String
    Default: codepipeline-ecs
  GithubBranch:
    Type: String
    Default: master
  GithubOAuthToken:
    Type: String
    Default: <GithubAccessToken>
  MS1ContainerPort:
    Type: Number
    Default: 8080
    Description: Container port for microservice 1
  MS2ContainerPort:
    Type: Number
    Default: 8080
    Description: Container port for microservice 2
#  MS3ContainerPort:
#    Type: Number
#    Default: 8080
#    Description: Container port for microservice 3
#  MS4ContainerPort:
#    Type: Number
#    Default: 8080
#    Description: Container port for microservice 4
#  MS5ContainerPort:
#    Type: Number
#    Default: 8080
#    Description: Container port for microservice 5
#  MS6ContainerPort:
#    Type: Number
#    Default: 8080
#    Description: Container port for microservice 6

Resources:
  # Create an ECR Repository to store docker images
  MS1ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS1GithubRepo]]
#  MS2ECRRepository:
#    Type: AWS::ECR::Repository
#    Properties:
#      RepositoryName: !Join ['-', [ !Ref Stage, !Ref 'AWS::AccountId', !Ref MS2GithubRepo]]
#  MS3ECRRepository:
#    Type: AWS::ECR::Repository
#    Properties:
#      RepositoryName: !Join [ '-',[ !Ref Stage, !Ref 'AWS::AccountId', !Ref MS3GithubRepo]]
#  MS4ECRRepository:
#    Type: AWS::ECR::Repository
#    Properties:
#      RepositoryName: !Join [ '-',[ !Ref Stage, !Ref 'AWS::AccountId', !Ref MS4GithubRepo]]
#  MS5ECRRepository:
#    Type: AWS::ECR::Repository
#    Properties:
#      RepositoryName: !Join [ '-',[ !Ref Stage, !Ref 'AWS::AccountId', !Ref MS5GithubRepo]]
#  MS6ECRRepository:
#    Type: AWS::ECR::Repository
#    Properties:
#      RepositoryName: !Join [ '-', [ !Ref Stage, !Ref 'AWS::AccountId', !Ref MS6GithubRepo ] ]

  # Create an S3 Bucket to store build artifacts
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]

  # Create Access Role for CodePipeLine
  CodePipeLineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create Access Role for CodeBuild
  CodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # Create Access Role for Cloudformation
  CloudformationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create the BuildProject with required Build information
  MS1BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "MS1ECRRepository" ] ] ] ]
      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS1GithubRepo]]
      ServiceRole: !Ref CodeBuildExecutionRole
      Source:
        Type: CODEPIPELINE
        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
        BuildSpec: buildspec.yml

#  MS2BuildProject:
#    Type: AWS::CodeBuild::Project
#    Properties:
#      Artifacts:
#        Type: CODEPIPELINE
#      Environment:
#        ComputeType: BUILD_GENERAL1_SMALL
#        Image: aws/codebuild/standard:2.0
#        ImagePullCredentialsType: CODEBUILD
#        PrivilegedMode: True
#        Type: LINUX_CONTAINER
#        EnvironmentVariables:
#          - Name: ECR_REPOSITORY_URI
#            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "MS2ECRRepository" ] ] ] ]
#      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS2GithubRepo]]
#      ServiceRole: !Ref CodeBuildExecutionRole
#      Source:
#        Type: CODEPIPELINE
#        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
#        BuildSpec: buildspec.yml

#  MS3BuildProject:
#    Type: AWS::CodeBuild::Project
#    Properties:
#      Artifacts:
#        Type: CODEPIPELINE
#      Environment:
#        ComputeType: BUILD_GENERAL1_SMALL
#        Image: aws/codebuild/standard:2.0
#        ImagePullCredentialsType: CODEBUILD
#        PrivilegedMode: True
#        Type: LINUX_CONTAINER
#        EnvironmentVariables:
#          - Name: ECR_REPOSITORY_URI
#            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "MS3ECRRepository" ] ] ] ]
#      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS3GithubRepo]]
#      ServiceRole: !Ref CodeBuildExecutionRole
#      Source:
#        Type: CODEPIPELINE
#        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
#        BuildSpec: buildspec.yml
#
#  MS4BuildProject:
#    Type: AWS::CodeBuild::Project
#    Properties:
#      Artifacts:
#        Type: CODEPIPELINE
#      Environment:
#        ComputeType: BUILD_GENERAL1_SMALL
#        Image: aws/codebuild/standard:2.0
#        ImagePullCredentialsType: CODEBUILD
#        PrivilegedMode: True
#        Type: LINUX_CONTAINER
#        EnvironmentVariables:
#          - Name: ECR_REPOSITORY_URI
#            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "MS4ECRRepository" ] ] ] ]
#      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS4GithubRepo]]
#      ServiceRole: !Ref CodeBuildExecutionRole
#      Source:
#        Type: CODEPIPELINE
#        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
#        BuildSpec: buildspec.yml
#
#  MS5BuildProject:
#    Type: AWS::CodeBuild::Project
#    Properties:
#      Artifacts:
#        Type: CODEPIPELINE
#      Environment:
#        ComputeType: BUILD_GENERAL1_SMALL
#        Image: aws/codebuild/standard:2.0
#        ImagePullCredentialsType: CODEBUILD
#        PrivilegedMode: True
#        Type: LINUX_CONTAINER
#        EnvironmentVariables:
#          - Name: ECR_REPOSITORY_URI
#            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "MS5ECRRepository" ] ] ] ]
#      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS5GithubRepo]]
#      ServiceRole: !Ref CodeBuildExecutionRole
#      Source:
#        Type: CODEPIPELINE
#        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
#        BuildSpec: buildspec.yml
#
#  MS6BuildProject:
#    Type: AWS::CodeBuild::Project
#    Properties:
#      Artifacts:
#        Type: CODEPIPELINE
#      Environment:
#        ComputeType: BUILD_GENERAL1_SMALL
#        Image: aws/codebuild/standard:2.0
#        ImagePullCredentialsType: CODEBUILD
#        PrivilegedMode: True
#        Type: LINUX_CONTAINER
#        EnvironmentVariables:
#          - Name: ECR_REPOSITORY_URI
#            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "MS6ECRRepository" ] ] ] ]
#      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS6GithubRepo]]
#      ServiceRole: !Ref CodeBuildExecutionRole
#      Source:
#        Type: CODEPIPELINE
#        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
#        BuildSpec: buildspec.yml

  # Create CodePipeline with 3 stages (Source, Build and Deploy)
  MS1CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
    - S3Bucket
    Properties:
      ArtifactStore:
        Location: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]
        Type: S3
      Name: !Ref MS1GithubRepo
      RestartExecutionOnUpdate: False
      RoleArn:
        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]

      Stages:

        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
        # Download Ops source code from Github Repo to ops-source-output-artifacts path in S3 Bucket
        - Name: Source
          Actions:
          - Name: Source
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: 1
            Configuration:
              Repo: !Ref MS1GithubRepo
              Branch: !Ref GithubBranch
              Owner: !Ref GithubUserName
              OAuthToken: !Ref GithubOAuthToken
            RunOrder: 1
            OutputArtifacts:
              - Name: source-output-artifacts
          - Name: OpsSource
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: 1
            Configuration:
              Repo: !Ref GithubOpsRepo
              Branch: microservice-6-customize
              Owner: !Ref GithubUserName
              OAuthToken: !Ref GithubOAuthToken
            RunOrder: 1
            OutputArtifacts:
              - Name: ops-source-output-artifacts
        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            OutputArtifacts:
              - Name: build-output-artifacts
            InputArtifacts:
              - Name: source-output-artifacts
            Configuration:
                ProjectName: !Ref MS1BuildProject
            RunOrder: 1

        # Deploy the project by executing FargateCluster.yml file in the Source code with Cloudformation.
        - Name: Deploy
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: ops-source-output-artifacts
              - Name: build-output-artifacts
            Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                # Pass parameter values to FargateCluster.yml for deployment
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${MS1ContainerPort}",
                    "AppName": "${MS1GithubRepo}"
                  }
                RoleArn:
                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId',!Ref MS1GithubRepo,'FargateECSCluster']]
                TemplatePath: ops-source-output-artifacts::FargateCluster.yml
            RunOrder: 1

#  MS2CodePipeLine:
#    Type: AWS::CodePipeline::Pipeline
#    DependsOn:
#      - S3Bucket
#      - MS1CodePipeLine
#    Properties:
#      ArtifactStore:
#        Location: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]
#        Type: S3
#      Name: !Ref MS2GithubRepo
#      RestartExecutionOnUpdate: False
#      RoleArn:
#        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]
#
#      Stages:
#
#        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
#        # Download Ops source code from Github Repo to ops-source-output-artifacts path in S3 Bucket
#        - Name: Source
#          Actions:
#            - Name: Source
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Provider: GitHub
#                Version: 1
#              Configuration:
#                Repo: !Ref MS1GithubRepo
#                Branch: !Ref GithubBranch
#                Owner: !Ref GithubUserName
#                OAuthToken: !Ref GithubOAuthToken
#              RunOrder: 1
#              OutputArtifacts:
#                - Name: source-output-artifacts
#            - Name: OpsSource
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Provider: GitHub
#                Version: 1
#              Configuration:
#                Repo: !Ref GithubOpsRepo
#                Branch: microservice-6-customize
#                Owner: !Ref GithubUserName
#                OAuthToken: !Ref GithubOAuthToken
#              RunOrder: 1
#              OutputArtifacts:
#                - Name: ops-source-output-artifacts
#        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
#        - Name: Build
#          Actions:
#            - Name: Build
#              ActionTypeId:
#                Category: Build
#                Owner: AWS
#                Version: 1
#                Provider: CodeBuild
#              OutputArtifacts:
#                - Name: build-output-artifacts
#              InputArtifacts:
#                - Name: source-output-artifacts
#              Configuration:
#                ProjectName: !Ref MS2BuildProject
#              RunOrder: 1
#
#        # Deploy the project by executing FargateCluster.yml file in the Source code with Cloudformation.
#        - Name: Deploy
#          Actions:
#            - Name: Deploy
#              ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Version: 1
#                Provider: CloudFormation
#              InputArtifacts:
#                - Name: ops-source-output-artifacts
#                - Name: build-output-artifacts
#              Configuration:
#                ActionMode: CREATE_UPDATE
#                Capabilities: CAPABILITY_NAMED_IAM
#                # Pass parameter values to FargateCluster.yml for deployment
#                ParameterOverrides: !Sub |
#                  {
#                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
#                    "Stage":  "${Stage}",
#                    "ContainerPort": "${MS2ContainerPort}",
#                    "AppName": "${MS2GithubRepo}"
#                  }
#                RoleArn:
#                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
#                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId',!Ref MS2GithubRepo, 'FargateECSService']]
#                TemplatePath: ops-source-output-artifacts::FargateService.yml
#              RunOrder: 1

#  MS3CodePipeLine:
#    Type: AWS::CodePipeline::Pipeline
#    DependsOn:
#      - S3Bucket
#      - MS1CodePipeLine
#    Properties:
#      ArtifactStore:
#        Location: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]
#        Type: S3
#      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS3GithubRepo]]
#      RestartExecutionOnUpdate: False
#      RoleArn:
#        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]
#
#      Stages:
#
#        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
#        # Download Ops source code from Github Repo to ops-source-output-artifacts path in S3 Bucket
#        - Name: Source
#          Actions:
#            - Name: Source
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Provider: GitHub
#                Version: 1
#              Configuration:
#                Repo: !Ref MS1GithubRepo
#                Branch: !Ref GithubBranch
#                Owner: !Ref GithubUserName
#                OAuthToken: !Ref GithubOAuthToken
#              RunOrder: 1
#              OutputArtifacts:
#                - Name: source-output-artifacts
#            - Name: OpsSource
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Provider: GitHub
#                Version: 1
#              Configuration:
#                Repo: !Ref GithubOpsRepo
#                Branch: !Ref GithubBranch
#                Owner: !Ref GithubUserName
#                OAuthToken: !Ref GithubOAuthToken
#              RunOrder: 1
#              OutputArtifacts:
#                - Name: ops-source-output-artifacts
#        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
#        - Name: Build
#          Actions:
#            - Name: Build
#              ActionTypeId:
#                Category: Build
#                Owner: AWS
#                Version: 1
#                Provider: CodeBuild
#              OutputArtifacts:
#                - Name: build-output-artifacts
#              InputArtifacts:
#                - Name: source-output-artifacts
#              Configuration:
#                ProjectName: !Ref MS3BuildProject
#              RunOrder: 1
#
#        # Deploy the project by executing FargateCluster.yml file in the Source code with Cloudformation.
#        - Name: Deploy
#          Actions:
#            - Name: Deploy
#              ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Version: 1
#                Provider: CloudFormation
#              InputArtifacts:
#                - Name: ops-source-output-artifacts
#                - Name: build-output-artifacts
#              Configuration:
#                ActionMode: CREATE_UPDATE
#                Capabilities: CAPABILITY_NAMED_IAM
#                # Pass parameter values to FargateCluster.yml for deployment
#                ParameterOverrides: !Sub |
#                  {
#                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
#                    "Stage":  "${Stage}",
#                    "ContainerPort": "${MS3ContainerPort}",
#                    "AppName": "${MS3GithubRepo}"
#                  }
#                RoleArn:
#                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
#                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId',!Ref MS3GithubRepo, 'FargateECSCluster']]
#                TemplatePath: ops-source-output-artifacts::FargateService.yml
#              RunOrder: 1
#
#  MS4CodePipeLine:
#    Type: AWS::CodePipeline::Pipeline
#    DependsOn:
#      - S3Bucket
#      - MS1CodePipeLine
#    Properties:
#      ArtifactStore:
#        Location: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]
#        Type: S3
#      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS4GithubRepo]]
#      RestartExecutionOnUpdate: False
#      RoleArn:
#        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]
#
#      Stages:
#
#        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
#        # Download Ops source code from Github Repo to ops-source-output-artifacts path in S3 Bucket
#        - Name: Source
#          Actions:
#            - Name: Source
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Provider: GitHub
#                Version: 1
#              Configuration:
#                Repo: !Ref MS1GithubRepo
#                Branch: !Ref GithubBranch
#                Owner: !Ref GithubUserName
#                OAuthToken: !Ref GithubOAuthToken
#              RunOrder: 1
#              OutputArtifacts:
#                - Name: source-output-artifacts
#            - Name: OpsSource
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Provider: GitHub
#                Version: 1
#              Configuration:
#                Repo: !Ref GithubOpsRepo
#                Branch: !Ref GithubBranch
#                Owner: !Ref GithubUserName
#                OAuthToken: !Ref GithubOAuthToken
#              RunOrder: 1
#              OutputArtifacts:
#                - Name: ops-source-output-artifacts
#        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
#        - Name: Build
#          Actions:
#            - Name: Build
#              ActionTypeId:
#                Category: Build
#                Owner: AWS
#                Version: 1
#                Provider: CodeBuild
#              OutputArtifacts:
#                - Name: build-output-artifacts
#              InputArtifacts:
#                - Name: source-output-artifacts
#              Configuration:
#                ProjectName: !Ref MS4BuildProject
#              RunOrder: 1
#
#        # Deploy the project by executing FargateCluster.yml file in the Source code with Cloudformation.
#        - Name: Deploy
#          Actions:
#            - Name: Deploy
#              ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Version: 1
#                Provider: CloudFormation
#              InputArtifacts:
#                - Name: ops-source-output-artifacts
#                - Name: build-output-artifacts
#              Configuration:
#                ActionMode: CREATE_UPDATE
#                Capabilities: CAPABILITY_NAMED_IAM
#                # Pass parameter values to FargateCluster.yml for deployment
#                ParameterOverrides: !Sub |
#                  {
#                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
#                    "Stage":  "${Stage}",
#                    "ContainerPort": "${MS4ContainerPort}",
#                    "AppName": "${MS4GithubRepo}"
#                  }
#                RoleArn:
#                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
#                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId',!Ref MS4GithubRepo, 'FargateECSCluster']]
#                TemplatePath: ops-source-output-artifacts::FargateService.yml
#              RunOrder: 1
#
#  MS5CodePipeLine:
#    Type: AWS::CodePipeline::Pipeline
#    DependsOn:
#      - S3Bucket
#      - MS1CodePipeLine
#    Properties:
#      ArtifactStore:
#        Location: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]
#        Type: S3
#      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS5GithubRepo]]
#      RestartExecutionOnUpdate: False
#      RoleArn:
#        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]
#
#      Stages:
#
#        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
#        # Download Ops source code from Github Repo to ops-source-output-artifacts path in S3 Bucket
#        - Name: Source
#          Actions:
#            - Name: Source
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Provider: GitHub
#                Version: 1
#              Configuration:
#                Repo: !Ref MS1GithubRepo
#                Branch: !Ref GithubBranch
#                Owner: !Ref GithubUserName
#                OAuthToken: !Ref GithubOAuthToken
#              RunOrder: 1
#              OutputArtifacts:
#                - Name: source-output-artifacts
#            - Name: OpsSource
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Provider: GitHub
#                Version: 1
#              Configuration:
#                Repo: !Ref GithubOpsRepo
#                Branch: !Ref GithubBranch
#                Owner: !Ref GithubUserName
#                OAuthToken: !Ref GithubOAuthToken
#              RunOrder: 1
#              OutputArtifacts:
#                - Name: ops-source-output-artifacts
#        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
#        - Name: Build
#          Actions:
#            - Name: Build
#              ActionTypeId:
#                Category: Build
#                Owner: AWS
#                Version: 1
#                Provider: CodeBuild
#              OutputArtifacts:
#                - Name: build-output-artifacts
#              InputArtifacts:
#                - Name: source-output-artifacts
#              Configuration:
#                ProjectName: !Ref MS5BuildProject
#              RunOrder: 1
#
#        # Deploy the project by executing FargateCluster.yml file in the Source code with Cloudformation.
#        - Name: Deploy
#          Actions:
#            - Name: Deploy
#              ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Version: 1
#                Provider: CloudFormation
#              InputArtifacts:
#                - Name: ops-source-output-artifacts
#                - Name: build-output-artifacts
#              Configuration:
#                ActionMode: CREATE_UPDATE
#                Capabilities: CAPABILITY_NAMED_IAM
#                # Pass parameter values to FargateCluster.yml for deployment
#                ParameterOverrides: !Sub |
#                  {
#                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
#                    "Stage":  "${Stage}",
#                    "ContainerPort": "${MS5ContainerPort}",
#                    "AppName": "${MS5GithubRepo}"
#                  }
#                RoleArn:
#                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
#                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId',!Ref MS5GithubRepo, 'FargateECSCluster']]
#                TemplatePath: ops-source-output-artifacts::FargateService.yml
#              RunOrder: 1
#
#  MS6CodePipeLine:
#    Type: AWS::CodePipeline::Pipeline
#    DependsOn:
#      - S3Bucket
#      - MS1CodePipeLine
#    Properties:
#      ArtifactStore:
#        Location: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]
#        Type: S3
#      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS6GithubRepo]]
#      RestartExecutionOnUpdate: False
#      RoleArn:
#        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]
#
#      Stages:
#
#        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
#        # Download Ops source code from Github Repo to ops-source-output-artifacts path in S3 Bucket
#        - Name: Source
#          Actions:
#            - Name: Source
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Provider: GitHub
#                Version: 1
#              Configuration:
#                Repo: !Ref MS1GithubRepo
#                Branch: !Ref GithubBranch
#                Owner: !Ref GithubUserName
#                OAuthToken: !Ref GithubOAuthToken
#              RunOrder: 1
#              OutputArtifacts:
#                - Name: source-output-artifacts
#            - Name: OpsSource
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Provider: GitHub
#                Version: 1
#              Configuration:
#                Repo: !Ref GithubOpsRepo
#                Branch: !Ref GithubBranch
#                Owner: !Ref GithubUserName
#                OAuthToken: !Ref GithubOAuthToken
#              RunOrder: 1
#              OutputArtifacts:
#                - Name: ops-source-output-artifacts
#        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
#        - Name: Build
#          Actions:
#            - Name: Build
#              ActionTypeId:
#                Category: Build
#                Owner: AWS
#                Version: 1
#                Provider: CodeBuild
#              OutputArtifacts:
#                - Name: build-output-artifacts
#              InputArtifacts:
#                - Name: source-output-artifacts
#              Configuration:
#                ProjectName: !Ref MS6BuildProject
#              RunOrder: 1
#
#        # Deploy the project by executing FargateCluster.yml file in the Source code with Cloudformation.
#        - Name: Deploy
#          Actions:
#            - Name: Deploy
#              ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Version: 1
#                Provider: CloudFormation
#              InputArtifacts:
#                - Name: ops-source-output-artifacts
#                - Name: build-output-artifacts
#              Configuration:
#                ActionMode: CREATE_UPDATE
#                Capabilities: CAPABILITY_NAMED_IAM
#                # Pass parameter values to FargateCluster.yml for deployment
#                ParameterOverrides: !Sub |
#                  {
#                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
#                    "Stage":  "${Stage}",
#                    "ContainerPort": "${MS6ContainerPort}",
#                    "AppName": "${MS6GithubRepo}"
#                  }
#                RoleArn:
#                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
#                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId',!Ref MS1GithubRepo, 'FargateECSCluster']]
#                TemplatePath: ops-source-output-artifacts::FargateService.yml
#              RunOrder: 1
Outputs:
  S3Bucket:
    Description: S3 buckets for build artifacts
    Value: !Ref S3Bucket
    Export:
      Name: S3Bucket
  CodePipeLineExecutionRoleArn:
    Description: CodePipeLineExecutionRole ARN
    Value: !GetAtt CodePipeLineExecutionRole.Arn
    Export:
      Name: CodePipeLineExecutionRoleArn
  CodeBuildExecutionRole:
    Description: CodeBuildExecutionRole
    Value: !Ref CodeBuildExecutionRole
    Export:
      Name: CodeBuildExecutionRole
  CloudformationExecutionRoleArn:
    Description: CloudformationExecutionRole
    Value: !GetAtt CloudformationExecutionRole.Arn
    Export:
      Name: CloudformationExecutionRoleArn
