AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the CodePipeline.

Parameters:
  Stage:
    Type: String
    Default: dev
  GithubUserName:
    Type: String
    Default: <GithubUser>
  MS1GithubRepo:
    Type: String
    Default: spring-codepipeline
    Description: Github Repo name for microservice 1
  GithubOpsRepo:
    Type: String
    Default: codepipeline-ecs
  GithubBranch:
    Type: String
    Default: master
  GithubOAuthToken:
    Type: String
    Default: <GithubAccessToken>
  MS1ContainerPort:
    Type: Number
    Default: 8080
    Description: Container port for microservice 1
  MS2ContainerPort:
    Type: Number
    Default: 8080
    Description: Container port for microservice 2

Resources:
  # Create an ECR Repository to store docker images
  MS1ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS1GithubRepo]]

  # Create an S3 Bucket to store build artifacts
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]

  # Create Access Role for CodePipeLine
  CodePipeLineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create Access Role for CodeBuild
  CodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # Create Access Role for Cloudformation
  CloudformationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create the BuildProject with required Build information
  MS1BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "MS1ECRRepository" ] ] ] ]
      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS1GithubRepo]]
      ServiceRole: !Ref CodeBuildExecutionRole
      Source:
        Type: CODEPIPELINE
        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
        BuildSpec: buildspec.yml

  # Create CodePipeline with 3 stages (Source, Build and Deploy)
  MS1CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
    - S3Bucket
    Properties:
      ArtifactStore:
        Location: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]
        Type: S3
      Name: !Ref MS1GithubRepo
      RestartExecutionOnUpdate: False
      RoleArn:
        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]

      Stages:

        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
        # Download Ops source code from Github Repo to ops-source-output-artifacts path in S3 Bucket
        - Name: Source
          Actions:
          - Name: Source
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: 1
            Configuration:
              Repo: !Ref MS1GithubRepo
              Branch: !Ref GithubBranch
              Owner: !Ref GithubUserName
              OAuthToken: !Ref GithubOAuthToken
            RunOrder: 1
            OutputArtifacts:
              - Name: source-output-artifacts
          - Name: OpsSource
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: 1
            Configuration:
              Repo: !Ref GithubOpsRepo
              Branch: microservice-6-customize
              Owner: !Ref GithubUserName
              OAuthToken: !Ref GithubOAuthToken
            RunOrder: 1
            OutputArtifacts:
              - Name: ops-source-output-artifacts
        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            OutputArtifacts:
              - Name: build-output-artifacts
            InputArtifacts:
              - Name: source-output-artifacts
            Configuration:
                ProjectName: !Ref MS1BuildProject
            RunOrder: 1

        # Deploy the project by executing FargateCluster.yml file in the Source code with Cloudformation.
        - Name: Deploy
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: ops-source-output-artifacts
              - Name: build-output-artifacts
            Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                # Pass parameter values to FargateCluster.yml for deployment
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${MS1ContainerPort}",
                    "AppName": "${MS1GithubRepo}"
                  }
                RoleArn:
                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId',!Ref MS1GithubRepo,'FargateECSCluster']]
                TemplatePath: ops-source-output-artifacts::FargateCluster.yml
            RunOrder: 1
Outputs:
  S3Bucket:
    Description: S3 buckets for build artifacts
    Value: !Ref S3Bucket
    Export:
      Name: S3Bucket
  CodePipeLineExecutionRoleArn:
    Description: CodePipeLineExecutionRole ARN
    Value: !GetAtt CodePipeLineExecutionRole.Arn
    Export:
      Name: CodePipeLineExecutionRoleArn
  CodeBuildExecutionRole:
    Description: CodeBuildExecutionRole
    Value: !Ref CodeBuildExecutionRole
    Export:
      Name: CodeBuildExecutionRole
  CloudformationExecutionRoleArn:
    Description: CloudformationExecutionRole
    Value: !GetAtt CloudformationExecutionRole.Arn
    Export:
      Name: CloudformationExecutionRoleArn
