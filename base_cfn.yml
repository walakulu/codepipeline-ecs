Description: This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  Stage:
    Type: String
    Default: dev
#
#  VpcCIDR:
#    Description: Please enter the IP range (CIDR notation) for this VPC
#    Type: String
#    Default: 10.192.0.0/16

#  PublicSubnet1CIDR:
#    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
#    Type: String
#    Default: 10.192.10.0/24

#  PublicSubnet2CIDR:
#    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
#    Type: String
#    Default: 10.192.11.0/24

#  PrivateSubnet1CIDR:
#    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
#    Type: String
#    Default: 10.192.20.0/24

#  PrivateSubnet2CIDR:
#    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
#    Type: String
#    Default: 10.192.21.0/24

Resources:

  MicroServiceVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Stage

  # Our VPC will need internet access:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Stage

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MicroServiceVPC

  # Create 2 public , 2 private subnets
  # PublicSubnet1 , PublicSubnet2 & PrivateSubnet1, PrivateSubnet2
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MicroServiceVPC
      # Get the first AZ in the list
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.192.10.0/24
      #      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Stage} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MicroServiceVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.192.11.0/24
      #      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Stage} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MicroServiceVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.192.20.0/24
      #      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Stage} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MicroServiceVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.192.21.0/24
      #      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Stage} Private Subnet (AZ2)

  # RouteTable for public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MicroServiceVPC
      Tags:
        - Key: Name
          Value: !Sub ${Stage} Public Routes

  # Public route table has direct routing to IGW:
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Private route table can access web via NAT (created below)
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MicroServiceVPC
      Tags:
        - Key: Name
          Value: !Sub ${Stage} Private Routes (AZ1)

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MicroServiceVPC
      Tags:
        - Key: Name
          Value: !Sub ${Stage} Private Routes (AZ2)

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  # Attach the public subnets to public route tables,
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Attach the private subnets to private route tables:
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # NAT Gateways
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

#  NoIngressSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupName: "no-ingress-sg"
#      GroupDescription: "Security group with no ingress rule"
#      VpcId: !Ref MicroServiceVPC

  # Create an ECS Cluster For Services
  ServiceCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join [ '-', [ !Ref Stage, 'ServiceCluster' ] ]

  # Create an ECS Cluster For Gateways
  GatewayCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join [ '-', [ !Ref Stage, 'GatewayCluster' ] ]

  # Create Access Role for ECS-Tasks
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'ExecutionRole']]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  # Create Access Role for CodePipeLine
  CodePipeLineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create Access Role for CodeBuild
  CodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # Create Access Role for Cloudformation
  CloudformationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create an S3 Bucket to store build artifacts
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 's3bucket']]


Outputs:
  MicroServiceVPC:
    Description: A reference to the created VPC
    Value: !Ref MicroServiceVPC
    Export:
      Name: MicroServiceVPC

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnet2

  ServiceCluster:
    Description: ServiceCluster Cluster
    Value: !Ref ServiceCluster
    Export:
      Name: ServiceCluster

  GatewayCluster:
    Description: GatewayCluster Cluster
    Value: !Ref GatewayCluster
    Export:
      Name: GatewayCluster

  EcsTaskExecutionRole:
    Description: ECS Task Execution Role
    Value: !Ref ExecutionRole
    Export:
      Name: EcsTaskExecutionRole

  S3Bucket:
    Description: S3 buckets for build artifacts
    Value: !Ref S3Bucket
    Export:
      Name: S3Bucket

  CodePipeLineExecutionRoleArn:
    Description: CodePipeLineExecutionRole ARN
    Value: !GetAtt CodePipeLineExecutionRole.Arn
    Export:
      Name: CodePipeLineExecutionRoleArn

  CodeBuildExecutionRole:
    Description: CodeBuildExecutionRole
    Value: !Ref CodeBuildExecutionRole
    Export:
      Name: CodeBuildExecutionRole

  CloudformationExecutionRoleArn:
    Description: CloudformationExecutionRole
    Value: !GetAtt CloudformationExecutionRole.Arn
    Export:
      Name: CloudformationExecutionRoleArn

#  NoIngressSecurityGroup:
#    Description: Security group with no ingress rule
#    Value: !Ref NoIngressSecurityGroup