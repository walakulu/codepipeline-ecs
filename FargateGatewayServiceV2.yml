AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the Fargate ECS Servce.

Parameters:
  Stage:
    Type: String
  ContainerPort:
    Type: Number
  ImageURI:
    Type: String
  AppName:
    Type: String
  LoadbalancerListnerRulePriority:
    Type: Number

Resources:

  # Create a TaskDefinition with container details
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: !ImportValue EcsTaskExecutionRole
      ExecutionRoleArn: !ImportValue EcsTaskExecutionRole
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref AppName]]
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs

  # Create a LoadBalancer and attach the Security group and Subnets
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Join ['-', [!Ref Stage, !Ref AppName, 'LB']]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !ImportValue PublicSubnet1
        - !ImportValue PublicSubnet2
      Type: application

  # Creat a security group for load balancer and open port 80 in bound from internet
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref Stage, !Ref AppName, 'LBSG']]
      VpcId: !ImportValue MicroServiceVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Creat a security group for Containers and open in bound Container port from Load balancer security group to the Container
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref AppName,'ContainerSecurityGroup']]
      GroupDescription: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'ContainerSecurityGroup']]
      VpcId: !ImportValue MicroServiceVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Create a TargetGroup for HTTP port 80
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', [!Ref Stage,!Ref AppName, 'TG']]
      Matcher:
        HttpCode: 404
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue MicroServiceVPC

  # Create a LoadBalancerListener and attach the TargetGroup and LoadBalancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP


  # Application Load Balancer listener.This could use to microservice load-balancing
  #  ListenerRule1:
  #    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
  #    Properties:
  #      Actions:
  #        - Type: forward
  #          TargetGroupArn: !Ref TargetGroup
  #      Conditions:
  #        - Field: path-pattern
  #          PathPatternConfig:
  #            Values:
  #              - !Sub '/${AppName}/*'
  #      ListenerArn: !ImportValue LoadBalancerListener
  #      Priority: !Ref LoadbalancerListnerRulePriority

  # Create an ECS Service and add created Cluster, TaskDefintion, Subnets, TargetGroup and SecurityGroup
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref AppName]]
      Cluster: !ImportValue GatewayCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !ImportValue PublicSubnet1
            - !ImportValue PublicSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref AppName]]
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

Outputs:
  LoadBalancerUrl:
    Description: Application URL
    Value: !GetAtt
      - LoadBalancer
      - DNSName
    Export:
     Name: !Join ['-', [!Ref AppName, 'ALB']]