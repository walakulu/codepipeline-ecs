AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the CodePipeline.

Parameters:
  Stage:
    Type: String
    Default: dev
  GithubUserName:
    Type: String
    Default: <GithubUser>
  MS2GithubRepo:
    Type: String
    Description: Github Repo name for microservice 2
  GithubOpsRepo:
    Type: String
    Default: codepipeline-ecs
  GithubBranch:
    Type: String
    Default: master
  GithubOAuthToken:
    Type: String
    Default: <GithubAccessToken>
  MS2ContainerPort:
    Type: Number
    Default: 8080
    Description: Container port for microservice 2
  LoadbalancerListnerRulePriority:
    Type: Number
    Default: 2
    Description: Loadbalancer Listner Priority Rule Number


Resources:
  # Create an ECR Repository to store docker images
  MS2ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', [ !Ref Stage, !Ref 'AWS::AccountId', !Ref MS2GithubRepo]]

  # Create the BuildProject with required Build information
  MS2BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "MS2ECRRepository" ] ] ] ]
      Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', !Ref MS2GithubRepo]]
      ServiceRole: !ImportValue CodeBuildExecutionRole
      Source:
        Type: CODEPIPELINE
        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
        BuildSpec: buildspec.yml

  # Create CodePipeline with 3 stages (Source, Build and Deploy)
  MS2CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !ImportValue S3Bucket
        Type: S3
      Name: !Ref MS2GithubRepo
      RestartExecutionOnUpdate: False
      RoleArn: !ImportValue CodePipeLineExecutionRoleArn

      Stages:

        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
        # Download Ops source code from Github Repo to ops-source-output-artifacts path in S3 Bucket
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Repo: !Ref MS2GithubRepo
                Branch: !Ref GithubBranch
                Owner: !Ref GithubUserName
                OAuthToken: !Ref GithubOAuthToken
              RunOrder: 1
              OutputArtifacts:
                - Name: source-output-artifacts
            - Name: OpsSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Repo: !Ref GithubOpsRepo
                Branch: microservice-6-customize
                Owner: !Ref GithubUserName
                OAuthToken: !Ref GithubOAuthToken
              RunOrder: 1
              OutputArtifacts:
                - Name: ops-source-output-artifacts
        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: build-output-artifacts
              InputArtifacts:
                - Name: source-output-artifacts
              Configuration:
                ProjectName: !Ref MS2BuildProject
              RunOrder: 1

        # Deploy the project by executing FargateCluster.yml file in the Source code with Cloudformation.
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              InputArtifacts:
                - Name: ops-source-output-artifacts
                - Name: build-output-artifacts
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                # Pass parameter values to FargateCluster.yml for deployment
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${MS2ContainerPort}",
                    "AppName": "${MS2GithubRepo}",
                    "LoadbalancerListnerRulePriority": "${LoadbalancerListnerRulePriority}"
                  }
                RoleArn: !ImportValue CloudformationExecutionRoleArn
                StackName: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId',!Ref MS2GithubRepo, 'FargateECSService']]
                TemplatePath: ops-source-output-artifacts::FargateService.yml
              RunOrder: 1
